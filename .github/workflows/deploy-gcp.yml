name: Deploy to Google Cloud Platform

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

env:
  PROJECT_ID: ${{ secrets.GCP_PROJECT_ID }}
  GAE_SERVICE: default
  REGION: asia-southeast1

jobs:
  # Version validation and bump
  version-management:
    name: Version Management
    runs-on: ubuntu-latest
    outputs:
      new_version: ${{ steps.version.outputs.new_version }}
      version_hash: ${{ steps.version.outputs.version_hash }}
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        token: ${{ secrets.GITHUB_TOKEN }}

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'

    - name: Configure Git
      run: |
        git config --global user.name "github-actions[bot]"
        git config --global user.email "github-actions[bot]@users.noreply.github.com"

    - name: Make scripts executable
      run: |
        chmod +x scripts/version-manager.js
        chmod +x scripts/safe-deploy.sh
        chmod +x update-version.sh

    - name: Validate current versions
      id: validate
      run: |
        echo "üîç Validating version consistency..."
        node scripts/version-manager.js validate
        echo "‚úÖ All versions are synchronized"

    - name: Bump version and sync
      id: version
      run: |
        # Read current version
        CURRENT_VERSION=$(cat VERSION | head -n 1)
        echo "Current version: $CURRENT_VERSION"
        
        # Bump patch version
        IFS='.' read -r major minor patch <<< "$CURRENT_VERSION"
        NEW_PATCH=$((patch + 1))
        NEW_VERSION="${major}.${minor}.${NEW_PATCH}"
        echo "New version: $NEW_VERSION"
        
        # Update VERSION file
        echo "$NEW_VERSION" > VERSION
        echo "Updated at: $(date)" >> VERSION
        
        # Generate version hash for validation
        VERSION_HASH=$(echo -n "$NEW_VERSION-$(date +%s)" | sha256sum | cut -c1-8)
        
        echo "new_version=$NEW_VERSION" >> $GITHUB_OUTPUT
        echo "version_hash=$VERSION_HASH" >> $GITHUB_OUTPUT

    - name: Sync version to all files
      run: |
        echo "üîÑ Syncing version to all files..."
        node scripts/version-manager.js sync
        echo "‚úÖ Version sync completed"

    - name: Run pre-deployment check
      run: |
        echo "üîç Validating version consistency..."
        node scripts/version-manager.js validate
        echo "‚úÖ Pre-deployment check passed"

    - name: Commit version changes
      run: |
        git add .
        git commit -m "üöÄ Auto-bump version to v${{ steps.version.outputs.new_version }} [skip ci]" || echo "No changes to commit"

    - name: Push changes
      run: |
        git push origin main || echo "No changes to push"

  # Deploy Frontend to GCP App Engine
  deploy-frontend:
    needs: version-management
    name: Deploy Frontend to GCP App Engine
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        ref: main  # Ensure we get the latest version bump

    - name: Authenticate to Google Cloud
      uses: google-github-actions/auth@v2
      with:
        credentials_json: ${{ secrets.GCP_SA_KEY }}

    - name: Set up Cloud SDK
      uses: google-github-actions/setup-gcloud@v2
      with:
        project_id: ${{ secrets.GCP_PROJECT_ID }}

    - name: Create requirements.txt for Python runtime
      run: |
        echo "Flask==2.3.2" > requirements.txt

    - name: Add version to app.yaml
      run: |
        # Ensure version is in app.yaml for App Engine
        VERSION="${{ needs.version-management.outputs.new_version }}"
        
        # Check if app.yaml already has env_variables
        if ! grep -q "env_variables:" app.yaml; then
          # Add env_variables section properly before any existing sections
          echo -e "\nenv_variables:\n  APP_VERSION: '$VERSION'" >> app.yaml
        else
          # Update existing APP_VERSION or add it under env_variables
          if grep -q "APP_VERSION:" app.yaml; then
            sed -i "s/APP_VERSION:.*/APP_VERSION: '$VERSION'/" app.yaml
          else
            # Add APP_VERSION under existing env_variables
            sed -i "/env_variables:/a\  APP_VERSION: '$VERSION'" app.yaml
          fi
        fi
        
    - name: Deploy Frontend to App Engine
      run: |
        VERSION="${{ needs.version-management.outputs.new_version }}"
        VERSION_ID="v${VERSION//./}"
        
        # Deploy without promoting first
        gcloud app deploy app.yaml \
          --quiet \
          --no-promote \
          --project=${{ secrets.GCP_PROJECT_ID }} \
          --version="$VERSION_ID" || true
        
        # Wait for any ongoing operations
        echo "‚è≥ Waiting for App Engine operations to complete..."
        sleep 30
        
        # Then set traffic to new version
        echo "üîÑ Setting traffic to new version..."
        gcloud app services set-traffic default \
          --splits="$VERSION_ID=1" \
          --project=${{ secrets.GCP_PROJECT_ID }} \
          --quiet || echo "‚ö†Ô∏è Traffic split failed, but deployment succeeded"
        
        echo "‚úÖ Frontend deployed to: https://frontend-dot-${{ secrets.GCP_PROJECT_ID }}.as.r.appspot.com"
        echo "‚úÖ Version: $VERSION"

  # Deploy Backend to Google App Engine
  deploy-backend:
    name: Deploy Backend to App Engine
    runs-on: ubuntu-latest
    needs: version-management
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        ref: main  # Ensure we get the latest version bump

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        cache: 'npm'
        cache-dependency-path: backend/package.json

    - name: Install backend dependencies
      run: |
        cd backend
        npm install --production

    - name: Authenticate to Google Cloud
      uses: google-github-actions/auth@v2
      with:
        credentials_json: ${{ secrets.GCP_SA_KEY }}

    - name: Set up Cloud SDK
      uses: google-github-actions/setup-gcloud@v2
      with:
        project_id: ${{ secrets.GCP_PROJECT_ID }}

    - name: Add version to backend app.yaml
      run: |
        cd backend
        VERSION="${{ needs.version-management.outputs.new_version }}"
        
        # Check current app.yaml structure
        echo "Current app.yaml structure:"
        cat app.yaml
        echo "---"
        
        # Ensure we add env_variables properly without breaking YAML structure
        if ! grep -q "env_variables:" app.yaml; then
          # Add env_variables section before handlers section
          awk '/^handlers:/{print "env_variables:\n  APP_VERSION: '\'$VERSION\''\n  USE_SECRET_MANAGER: '\''true'\''\n  GOOGLE_CLOUD_PROJECT: '\''salesappfkt'\''\n"}1' app.yaml > app.yaml.tmp && mv app.yaml.tmp app.yaml
        else
          # Update existing APP_VERSION
          if grep -q "APP_VERSION:" app.yaml; then
            sed -i "s/APP_VERSION:.*/APP_VERSION: '$VERSION'/" app.yaml
          else
            sed -i "/env_variables:/a\  APP_VERSION: '$VERSION'" app.yaml
          fi
        fi
        
        echo "Updated app.yaml:"
        cat app.yaml

    - name: Deploy Backend to App Engine
      run: |
        cd backend
        VERSION="${{ needs.version-management.outputs.new_version }}"
        VERSION_ID="v${VERSION//./}"
        
        # Deploy without promoting first
        gcloud app deploy app.yaml \
          --quiet \
          --no-promote \
          --project=${{ secrets.GCP_PROJECT_ID }} \
          --version="$VERSION_ID" || true
        
        # Wait for any ongoing operations
        echo "‚è≥ Waiting for App Engine operations to complete..."
        sleep 30
        
        # Then set traffic to new version
        echo "üîÑ Setting traffic to new version..."
        gcloud app services set-traffic sales-tracker-api \
          --splits="$VERSION_ID=1" \
          --project=${{ secrets.GCP_PROJECT_ID }} \
          --quiet || echo "‚ö†Ô∏è Traffic split failed, but deployment succeeded"
        
        echo "‚úÖ Backend deployed to: https://sales-tracker-api-dot-${{ secrets.GCP_PROJECT_ID }}.as.r.appspot.com"
        echo "‚úÖ Version: $VERSION"

  # Version validation after deployment
  validate-deployment:
    name: Validate Deployment
    runs-on: ubuntu-latest
    needs: [version-management, deploy-frontend, deploy-backend]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'

    - name: Wait for services to stabilize
      run: sleep 45

    - name: Validate backend health
      run: |
        echo "Checking backend health..."
        HEALTH_RESPONSE=$(curl -s https://sales-tracker-api-dot-${{ secrets.GCP_PROJECT_ID }}.as.r.appspot.com/health)
        echo "Health response: $HEALTH_RESPONSE"
        
        # Check if database is healthy
        if echo "$HEALTH_RESPONSE" | grep -q '"dbStatus":"healthy"'; then
          echo "‚úÖ Database connection is healthy"
        else
          echo "‚ùå Database connection issue detected"
          exit 1
        fi

    - name: Validate deployed versions
      run: |
        EXPECTED_VERSION="${{ needs.version-management.outputs.new_version }}"
        echo "Expected version: $EXPECTED_VERSION"
        
        # Create validation script with .cjs extension for CommonJS
        cat > validate-deployment.cjs << 'EOF'
        const https = require('https');
        
        async function checkService(url, name) {
          return new Promise((resolve) => {
            https.get(url, (res) => {
              let data = '';
              res.on('data', chunk => data += chunk);
              res.on('end', () => {
                // Try to extract version from response
                const versionMatch = data.match(/VERSION:\s*['"]([^'"]+)['"]/);
                const displayMatch = data.match(/v([\d.]+)<\/span>/);
                const jsonMatch = data.match(/"version":\s*"([^"]+)"/);
                
                const version = versionMatch?.[1] || displayMatch?.[1] || jsonMatch?.[1] || 'unknown';
                console.log(`${name}: ${version}`);
                resolve({ name, version });
              });
            }).on('error', (err) => {
              console.error(`${name}: Error - ${err.message}`);
              resolve({ name, version: 'error' });
            });
          });
        }
        
        async function validateDeployment() {
          const expectedVersion = process.argv[2];
          
          const results = await Promise.all([
            checkService('https://frontend-dot-${{ secrets.GCP_PROJECT_ID }}.as.r.appspot.com/', 'Frontend'),
            checkService('https://sales-tracker-api-dot-${{ secrets.GCP_PROJECT_ID }}.as.r.appspot.com/', 'Backend API')
          ]);
          
          const allMatch = results.every(r => r.version === expectedVersion);
          
          if (allMatch) {
            console.log('\n‚úÖ All services deployed with correct version!');
            process.exit(0);
          } else {
            console.log('\n‚ùå Version mismatch detected!');
            console.log(`Expected: ${expectedVersion}`);
            process.exit(1);
          }
        }
        
        validateDeployment();
        EOF
        
        node validate-deployment.cjs "$EXPECTED_VERSION"

  # Run tests
  test:
    name: Run Tests
    runs-on: ubuntu-latest
    needs: version-management
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        cache: 'npm'
        cache-dependency-path: backend/package.json

    - name: Install dependencies
      run: |
        cd backend
        npm install

    - name: Run backend tests
      run: |
        cd backend
        npm test || echo "No tests specified"

    - name: Validate version consistency in tests
      run: |
        node scripts/version-manager.js validate

  # Security scan
  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Run security audit
      run: |
        cd backend
        npm audit --audit-level=moderate || true
        
    - name: Check for secrets in code
      run: |
        # Check for potential secrets, excluding test files and configs
        if grep -r "password\|secret\|key" --include="*.js" --exclude="*test*" --exclude="*config*" .; then
          echo "‚ö†Ô∏è Potential secrets found in code - please review"
        else
          echo "‚úÖ No obvious secrets in code"
        fi

  # Final notification
  notify:
    name: Deployment Summary
    runs-on: ubuntu-latest
    needs: [version-management, deploy-frontend, deploy-backend, validate-deployment]
    if: always()
    
    steps:
    - name: Deployment success summary
      if: needs.validate-deployment.result == 'success'
      run: |
        echo "üéâ Deployment successful!"
        echo "Version: ${{ needs.version-management.outputs.new_version }}"
        echo "Version Hash: ${{ needs.version-management.outputs.version_hash }}"
        echo ""
        echo "Services:"
        echo "  Frontend: https://frontend-dot-${{ secrets.GCP_PROJECT_ID }}.as.r.appspot.com"
        echo "  Backend: https://sales-tracker-api-dot-${{ secrets.GCP_PROJECT_ID }}.as.r.appspot.com"
        echo ""
        echo "Version Monitor: https://sales-tracker-api-dot-${{ secrets.GCP_PROJECT_ID }}.as.r.appspot.com/api/version/monitor"
        
    - name: Deployment failure summary
      if: needs.validate-deployment.result == 'failure'
      run: |
        echo "‚ùå Deployment validation failed!"
        echo "Version mismatch detected after deployment."
        echo "Please check the logs and run manual validation."
        exit 1