name: Deploy to Google Cloud Platform

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

env:
  PROJECT_ID: ${{ secrets.GCP_PROJECT_ID }}
  GAE_SERVICE: default
  REGION: asia-southeast1

jobs:
  # Deploy Frontend to GCP App Engine
  deploy-frontend:
    name: Deploy Frontend to GCP App Engine
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Authenticate to Google Cloud
      uses: google-github-actions/auth@v2
      with:
        credentials_json: ${{ secrets.GCP_SA_KEY }}

    - name: Set up Cloud SDK
      uses: google-github-actions/setup-gcloud@v2
      with:
        project_id: ${{ secrets.GCP_PROJECT_ID }}

    - name: Create requirements.txt for Python runtime
      run: |
        echo "Flask==2.3.2" > requirements.txt
        
    - name: Deploy Frontend to App Engine
      run: |
        # Deploy frontend service
        gcloud app deploy app.yaml --quiet --project=${{ secrets.GCP_PROJECT_ID }} --stop-previous-version
        
        echo "Frontend deployed to: https://frontend-dot-${{ secrets.GCP_PROJECT_ID }}.as.r.appspot.com"

  # Deploy Backend to Google App Engine
  deploy-backend:
    name: Deploy Backend to App Engine
    runs-on: ubuntu-latest
    needs: deploy-frontend
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        cache: 'npm'
        cache-dependency-path: backend/package.json

    - name: Install backend dependencies
      run: |
        cd backend
        npm install

    - name: Create app.yaml for App Engine
      run: |
        cd backend
        cat > app.yaml << EOF
        runtime: nodejs20
        service: default
        
        env_variables:
          LINE_CHANNEL_ACCESS_TOKEN: ${{ secrets.LINE_CHANNEL_ACCESS_TOKEN }}
          LINE_CHANNEL_SECRET: ${{ secrets.LINE_CHANNEL_SECRET }}
          NODE_ENV: production
          
        automatic_scaling:
          min_instances: 0
          max_instances: 10
          target_cpu_utilization: 0.6
          
        resources:
          cpu: 1
          memory_gb: 0.5
          disk_size_gb: 10
        EOF

    - name: Authenticate to Google Cloud
      uses: google-github-actions/auth@v2
      with:
        credentials_json: ${{ secrets.GCP_SA_KEY }}

    - name: Set up Cloud SDK
      uses: google-github-actions/setup-gcloud@v2
      with:
        project_id: ${{ secrets.GCP_PROJECT_ID }}

    - name: Deploy to App Engine
      run: |
        cd backend
        gcloud app deploy app.yaml --quiet --promote

    - name: Display Deployment URLs
      run: |
        # Display the deployment URLs
        echo "✅ Backend deployed to: https://sales-tracker-api-dot-${{ secrets.GCP_PROJECT_ID }}.as.r.appspot.com"
        echo "✅ Frontend will be deployed to: https://frontend-dot-${{ secrets.GCP_PROJECT_ID }}.as.r.appspot.com"

  # Database setup removed - using in-memory storage for simplicity

  # Run tests
  test:
    name: Run Tests
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        cache: 'npm'
        cache-dependency-path: backend/package.json

    - name: Install dependencies
      run: |
        cd backend
        npm install

    - name: Run tests
      run: |
        cd backend
        npm test || echo "No tests specified"

    - name: Test frontend
      run: |
        # Basic frontend validation
        if [ -f "index.html" ]; then
          echo "✅ Frontend files exist"
          # Check for required scripts
          if grep -q "liff" index.html; then
            echo "✅ LIFF integration found"
          fi
        fi

  # Security scan
  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Run security audit
      run: |
        cd backend
        npm audit --audit-level=moderate || true
        
    - name: Check for secrets in code
      run: |
        # Simple check for potential secrets
        if grep -r "password\|secret\|key" --include="*.js" --include="*.json" .; then
          echo "⚠️ Potential secrets found in code"
        else
          echo "✅ No obvious secrets in code"
        fi

  # Notify deployment status
  notify:
    name: Notify Deployment Status
    runs-on: ubuntu-latest
    needs: [deploy-frontend, deploy-backend]
    if: always()
    
    steps:
    - name: Notify success
      if: needs.deploy-frontend.result == 'success' && needs.deploy-backend.result == 'success'
      run: |
        echo "🎉 Deployment successful!"
        echo "Frontend: https://frontend-dot-${{ secrets.GCP_PROJECT_ID }}.as.r.appspot.com"
        echo "Backend: https://sales-tracker-api-dot-${{ secrets.GCP_PROJECT_ID }}.as.r.appspot.com"
        
    - name: Notify failure
      if: needs.deploy-frontend.result == 'failure' || needs.deploy-backend.result == 'failure'
      run: |
        echo "❌ Deployment failed!"
        exit 1