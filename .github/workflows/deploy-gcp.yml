name: Deploy to Google Cloud Platform

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

env:
  PROJECT_ID: ${{ secrets.GCP_PROJECT_ID }}
  GAE_SERVICE: default
  REGION: asia-southeast1

jobs:
  # Bump version
  version-bump:
    name: Bump Version
    runs-on: ubuntu-latest
    outputs:
      new_version: ${{ steps.bump.outputs.new_version }}
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        token: ${{ secrets.GITHUB_TOKEN }}

    - name: Configure Git
      run: |
        git config --global user.name "github-actions[bot]"
        git config --global user.email "github-actions[bot]@users.noreply.github.com"

    - name: Get current version and bump
      id: bump
      run: |
        # Get current version
        CURRENT_VERSION=$(grep -o '"version": "[^"]*"' package.json | grep -o '[0-9]\+\.[0-9]\+\.[0-9]\+' | head -1)
        echo "Current version: $CURRENT_VERSION"
        
        # Bump patch version
        IFS='.' read -ra VERSION_PARTS <<< "$CURRENT_VERSION"
        MAJOR=${VERSION_PARTS[0]}
        MINOR=${VERSION_PARTS[1]}
        PATCH=$((VERSION_PARTS[2] + 1))
        NEW_VERSION="$MAJOR.$MINOR.$PATCH"
        
        echo "New version: $NEW_VERSION"
        echo "new_version=$NEW_VERSION" >> $GITHUB_OUTPUT
        
        # Update all version references
        ./scripts/bump-version.sh patch || echo "Script not found, updating manually"
        
        # Ensure version is updated in critical files
        sed -i "s/VERSION: '[^']*'/VERSION: '$NEW_VERSION'/" index.html
        sed -i "s/>$CURRENT_VERSION</>$NEW_VERSION</" index.html
        sed -i "s/What's New in v[^\"]*\"/What's New in v$NEW_VERSION\"/" index.html

    - name: Commit version changes
      run: |
        git add .
        git commit -m "üöÄ Auto-bump version to v${{ steps.bump.outputs.new_version }}" || echo "No changes to commit"

    - name: Push changes
      run: |
        git push origin main || echo "No changes to push"

  # Deploy Frontend to GCP App Engine
  deploy-frontend:
    needs: version-bump
    name: Deploy Frontend to GCP App Engine
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Authenticate to Google Cloud
      uses: google-github-actions/auth@v2
      with:
        credentials_json: ${{ secrets.GCP_SA_KEY }}

    - name: Set up Cloud SDK
      uses: google-github-actions/setup-gcloud@v2
      with:
        project_id: ${{ secrets.GCP_PROJECT_ID }}

    - name: Create requirements.txt for Python runtime
      run: |
        echo "Flask==2.3.2" > requirements.txt
        
    - name: Deploy Frontend to App Engine
      run: |
        # Deploy frontend service
        gcloud app deploy app.yaml --quiet --project=${{ secrets.GCP_PROJECT_ID }} --stop-previous-version
        
        echo "Frontend deployed to: https://frontend-dot-${{ secrets.GCP_PROJECT_ID }}.as.r.appspot.com"

  # Deploy Backend to Google App Engine
  deploy-backend:
    name: Deploy Backend to App Engine
    runs-on: ubuntu-latest
    needs: deploy-frontend
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        cache: 'npm'
        cache-dependency-path: backend/package.json

    - name: Install backend dependencies
      run: |
        cd backend
        npm install

    - name: Authenticate to Google Cloud
      uses: google-github-actions/auth@v2
      with:
        credentials_json: ${{ secrets.GCP_SA_KEY }}

    - name: Set up Cloud SDK
      uses: google-github-actions/setup-gcloud@v2
      with:
        project_id: ${{ secrets.GCP_PROJECT_ID }}

    - name: Deploy Backend to App Engine
      run: |
        cd backend
        gcloud app deploy app.yaml --quiet --promote

    - name: Deploy Frontend to App Engine
      run: |
        # Deploy frontend from root directory
        gcloud app deploy app.yaml --quiet --promote

    - name: Display Deployment URLs
      run: |
        # Display the deployment URLs
        echo "‚úÖ Backend deployed to: https://sales-tracker-api-dot-${{ secrets.GCP_PROJECT_ID }}.as.r.appspot.com"
        echo "‚úÖ Frontend deployed to: https://frontend-dot-${{ secrets.GCP_PROJECT_ID }}.as.r.appspot.com"
        echo "‚úÖ Version: ${{ needs.version-bump.outputs.new_version }}"

  # Database setup removed - using in-memory storage for simplicity

  # Run tests
  test:
    name: Run Tests
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        cache: 'npm'
        cache-dependency-path: backend/package.json

    - name: Install dependencies
      run: |
        cd backend
        npm install

    - name: Run tests
      run: |
        cd backend
        npm test || echo "No tests specified"

    - name: Test frontend
      run: |
        # Basic frontend validation
        if [ -f "index.html" ]; then
          echo "‚úÖ Frontend files exist"
          # Check for required scripts
          if grep -q "liff" index.html; then
            echo "‚úÖ LIFF integration found"
          fi
        fi

  # Security scan
  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Run security audit
      run: |
        cd backend
        npm audit --audit-level=moderate || true
        
    - name: Check for secrets in code
      run: |
        # Simple check for potential secrets
        if grep -r "password\|secret\|key" --include="*.js" --include="*.json" .; then
          echo "‚ö†Ô∏è Potential secrets found in code"
        else
          echo "‚úÖ No obvious secrets in code"
        fi

  # Notify deployment status
  notify:
    name: Notify Deployment Status
    runs-on: ubuntu-latest
    needs: [version-bump, deploy-frontend, deploy-backend]
    if: always()
    
    steps:
    - name: Notify success
      if: needs.deploy-frontend.result == 'success' && needs.deploy-backend.result == 'success'
      run: |
        echo "üéâ Deployment successful!"
        echo "Version: ${{ needs.version-bump.outputs.new_version }}"
        echo "Frontend: https://frontend-dot-${{ secrets.GCP_PROJECT_ID }}.as.r.appspot.com"
        echo "Backend: https://sales-tracker-api-dot-${{ secrets.GCP_PROJECT_ID }}.as.r.appspot.com"
        
    - name: Notify failure
      if: needs.deploy-frontend.result == 'failure' || needs.deploy-backend.result == 'failure'
      run: |
        echo "‚ùå Deployment failed!"
        exit 1